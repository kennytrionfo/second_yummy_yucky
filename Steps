
= = = = = = LOG TIME  ! ! !  ! !

GENERAL INFO: 
Step by step instructions on how to build fit_right app in ruby on rails.
These steps are copied over from fit_right, a working app on the work viao. 

TO DOs:
- Put devise in. 
- Add in here how add things to devise. 
- pretty forms? 
- Create a master T0-DOs START LIST and add commits, testing, branching etc onto it. 

STEPS: 
Create a new rails app:
	skipping test unit and using Postgress DB in the installation:
	rails new fit_right --skip-test-unit -d postgresql
	should see rails create a bunch of files & directories for you and then bundle install for you too.  
	rake db:create and rake db:migrate
	check localhost:3000 in browser to make sure you see rails welcome 

Start repo:
	Initialize a repository on your machine:  
	git init
	git add .
	git commit -m "first commit"
	
	Create a remote repo on github and sync them:
	Go create the repo on github
	git remote add origin https://github.com/kennytrionfo/fit_right.git
	git push -u origin master

Start documentation: 
	Open app in text editor, 
	Edit readme file if u like, 
	Start step by step instructions file if you like. 

System check: 
	Check ur Rubies, versions and gems etc. i.e. rvm, ruby, rails, bundle, gems etc. 
	rvm list
	rvm gemset
	ruby -v
	rails -v

Install gems: 
	In Gemfile:
	group :development do
	  gem "better_errors"
	end
	gem "binding_of_caller" #This goes with better_errors gem and give you REPL.
	factory girl, sprockets? , Devise?
	Minitest: 
	group :test, :development do
  	gem "minitest-rails"
	end
	Check for the minitest generator in console with: 
	rails generate
	Install the gem with this from the console:
	rails g minitest:install
	Should see a test folder now in ur app in text editor. 

PUT TESTING IN HERE ALONG THE WAY!

ALSO COME BACK AND ADD IN HERE INSTRUCTIONS FOR MAKING IT MOBILE READY 

Set up Devise
	To gemfile add: 
	gem 'devise'
	and bundle
	

Create restaurant model with controllers, views and test files: 
	rails g scaffold restaurant title:string description:text
	then
	rake db:migrate
	commit

Confirm in localhost:3000/restaurant

Change root to point to the restaurants controller and the index action: 
	In routes.rb file: 
	root "restaurants#index"
	Check localhost:3000 in browser. Should show all the lists without need to go to /restaurants

Generate a model for our dishs with a content row/attribute that's a string and that references the restaurant: 
	With: 
	rails g model dish content:string restaurant:references 
	rake db:migrate

Do your associations for your models: 
	Tell the restaurant model that it has many dishs: 
	In the restaurant.rb file: 
	has_many :dishs

	Tell the dish model that it belongs to restaurants with: 
	belongs_to :restaurant

Create some nested routes for our dishs: 
	In routes.rb file, make restaurants resources a block with dishs resources inside:  
	resources :restaurants do
		resources :dishs
	end

Look at the routes this created: 
	With: 
	rake routes

Generate a controller for your dish: 
	In the console with: 
	rails g controller dishs

Give yourself the ability to create new restaurants with new dishs: 
	In dishs_controller.rb, create a create method that creates a new restaurant variable/instance by setting it to a new TodoList that you find by the restaurant_id key. 
	Then create a method that creates a new dish by .. 
	with two private methods, one to set the restaurant and one to create dish params like: 
	
	before_action :set_restaurant

	def create
		@dish = @restaurant.dish.create(dish_params)
		redirect_to @restaurant 
	end


	private

	def set_restaurant 
		@restaurant = TodoList.find(params[:restaurant_id])
	end

	def dish_params
		params[:dish].permit(:content)
	end

Now create the form to actually create a new restaurant: 
	Create two partials (new files) in views/dishs:
	1 _form.html.erb 
	<%= form_for([@restaurant, @restaurant.dishs.build]) do |f| %>
	<%= f.text_field :content, placeholder: "New Todo" %>
	<%= f.submit %>
	<%= end %>

	2 _dish.html.erb
	<p> <%= dish.content %></p>

Show the todo form and the restaurant items under the restaurant show page:
	Create a div that renders the restaurant from the _dishs.html.erb file. Under the description: 
	<div id="dishs_wrapper">
		<%= render @restaurant.dishs %>
	</div>
	Add another div inside of that div that renders the dish's form: 
	<div id="form">
		<%= render "dishs/form" %>
	</div>
	Test the show page that it shows and that you can make new dishs in a list. 

Add a delete button for the items: 
	Back in _dish.html.erb: 
	<%= link_to "Delete", restaurant 
	git commit -m ""_dish_path(@restaurant, dish.id), method: :delete, data: {confirm: "Are you sure?"} %>

Make it so that the app can take a delete request for an item and route it to the right method: 
	In dishs controller:
	def destroy
		@dish = @restaurant.dishs.find(params[:id])
		if @dish.destroy
			flash[:success] = "restaurant item was deleted"
		else
			flash[:error] = "restaurant item could not be deleted dude."	
		end
		redirect_to @restaurant	
	end
	Check it in browser. 

Create the ability to mark an item as complete: 
	Add a migration to add a completed at datetime to the dishs table: 
	In console: 
	rails g migration add_completed_at_to_dishs completed_at:datetime
	rake db:migrate

	Add a route to give users the ability to mark an item as complete: 
	In config/routes.rb: 
	Make the dishs resources a block and add patch :complete. Should look like:
	resources :dishs do
      member do
        patch :complete
      end
    end
    rake routes to see it at the top. 

    In views/dishs/_dish.html.erb add:
    <%= link_to "Mark as Complete", complete_restaurant_dish_path(@restaurant, dish.id), method: :patch %>
    Test in browswer. 

    Now add the complete action in the dishs controller: 
    Create a private method: 
    def set_dish
		@dish = @restaurant.dishs.find(params[:id])		
	end
	We can also now remove this line from the destroy action above now that it's a private method. 
	Now create a before action: 
	before_action :set_dish, except: [:create]

	Create a create action: 
	def complete
		@dish.update_attribute(:completed_at, Time.now)
		redirect_to @restaurant, notice: "dish completed dude"
	end
	Test in browswer. Just a flash message will show is all at this point. It is marked as complete but nothing changes. 

	Next clean up and add to _dish.html.erb: 
	Replace what's there with: 
	<div class="row clearfix">
		<% if dish.completed? %>
			<div class="complete">
				<%= link_to "Mark as Complete", complete_restaurant_dish_path(@restaurant, dish.id), method: :patch %>
			</div>
			<div class="dish">
				<p style="opacity: 0.4;"><strike><%= dish.content %></strike></p>
			</div>
			<div class="trash">
				<%= link_to "Delete", restaurant_dish_path(@restaurant, dish.id), method: :delete, data: { confirm: "Are you sure?" } %>
			</div>
		<% else %>
			<div class="complete">
				<%= link_to "Mark as Complete", complete_restaurant_dish_path(@restaurant, dish.id), method: :patch %>
			</div>
			<div class="dish">
				<p><%= dish.content %></p>
			</div>
			<div class="trash">
				<%= link_to "Delete", restaurant_dish_path(@restaurant, dish.id), method: :delete, data: { confirm: "Are you sure?" } %>
			</div>
		<% end %>
	</div>

	We can't use the dish.completed?, we have to define what it is so in TodoItem Model: 
	def completed? # If it's completed, the completed_at field should not be blank. 
		!completed_at.blank?  	
  	end
  	Test in browser.

Begin styling.

Clean up css files and names:
	Add .scss to application.css file in app/assets/stylesheets.
	Delete the scaffolds, dishs and restaurants css.scss files.
	
Create own css styling or paste in this for convenience: 
	$white_opaque: rgba(250, 250, 250, .3);
	$dark: #1F7972;

	* {
		box-sizing: border-box;
	}

	html {
	  height: 100%;
	}

	body {
	 	height: 100%;
	  background: -webkit-linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  background:    -moz-linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  background:     -ms-linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  background:      -o-linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  background:         linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  font-family: 'Lato', sans-serif;
	}

	.clearfix:before,
	.clearfix:after {
	    content: " ";
	    display: table;
	}

	.clearfix:after {
	    clear: both;
	}

	#notice {
		text-align: center;
		font-size: 0.6em;
		color: $dark;
		font-weight: 100;
	}

	.container {
		width: 50%;
		max-width: 750px;
		background: $white_opaque;
		margin: 3em auto 0 auto;
		border-radius: 7px;
		-webkit-box-shadow: 0 0 4px 3px rgba(0,0,0,.3);
		box-shadow: 0 0 4px 4px rgba(0,0,0,.03);
		padding: 1em 0;
	}

	.restaurant_title {
		text-align: center;
		font-weight: 700;
		font-size: 2.5rem;
		text-transform: uppercase;
		color: white;
		margin: 0;
		a {
			text-decoration: none;
			color: white;
			transition: all .4s ease-in-out;
			&:hover {
				opacity: 0.4;
			}
		}
	}

	.restaurant_sub_title {
		margin: 0 0 3em 0;
		text-align: center;
		font-size: 0.9em;
		color: $dark;
		font-weight: 100;
	}

	.index_row {
		padding: 2em;
		border-bottom: 1px solid rgba(250,250,250, .3);
		.restaurant_sub_title {
			margin-bottom: 0;
		}
	}

	#dishs_wrapper {
		.row {
			width: 100%;
			border-top: 1px solid rgba(250,250,250, .3);
			border-bottom: 1px solid rgba(250,250,250, .3);
			.complete {
				width: 10%;
				float: left;
				text-align: center;
				border-right: 1px solid rgba(250,250,250, .3);
				padding: 1em 0;
			}
			.dish {
				width: 80%;
				float: left;
				p {
					margin: 0;
					padding: 1em;
					color: $dark;
					font-weight: 100;
				}
			}
			.trash {
				width: 10%;
				float: left;
				text-align: center;
				border-left: 1px solid rgba(250,250,250, .3);
				padding: 1em 0;
			}
			i {
				color: white;
				transition: all .4s ease-in-out;
				&:hover {
					color: $dark;
				}
			}
		}
		#form {
			margin-top: 2em;
			padding: 0 5%;
			input[type="text"] {
				width: 72%;
				margin-right: 2%;
				display: inline-block;
				outline: none;
				background: rgba(250,250,250,.4);
				border: none;
				height: 40px;
				border-radius: 4px;
				padding: 1em 2em;
			}
			input[type="submit"] {
				background: rgba(250,250,250,.4);
				outline: none;
				border: none;
				height: 40px;
				border-radius: 4px;
				width: 25%;
				display: inline-block;
				transition: all .4s ease-in-out;
				cursor: pointer;
				&:hover {
					background: $dark;
				}
			}
			::-webkit-input-placeholder { color: $dark; }
		}
	}

	.links {
		display: block;
		margin: 1.5em auto 0 auto;
		text-align: center;
		font-size: 0.8em;
		color: white;
		a {
			color: white;
		}
	}

	.forms {
		padding: 0 5%;
	}
	label {
		color: $dark;
	}
	input[type="text"], textarea {
		width: 100%;
		margin: .5em 2% 1em 0;
		display: inline-block;
		outline: none;
		background: rgba(250,250,250,.4);
		border: none;
		height: 40px;
		border-radius: 4px;
		padding: 1em 2em;
	}
	textarea {
		height: 200px;
	}
	input[type="submit"] {
		background: white;
		outline: none;
		border: none;
		height: 40px;
		border-radius: 4px;
		width: 25%;
		display: inline-block;
		transition: all .4s ease-in-out;
		cursor: pointer;
		color: $dark;
		&:hover {
			background: $dark;
			color: white;
		}
	}
	::-webkit-input-placeholder { color: $dark; }

In views/applications/layout.html.erb, wrap the yield in a container class like this: 
	<div class="container">
		<%= yield %>
	</div>

Update the index page in restaurants/index.html.erb by deleting what's there and replace with this:
	<% @restaurants.each do |restaurant| %>
	  <div class="index_row clearfix">
	    <h2 class="restaurant_title"><%= link_to restaurant.title, restaurant %></h2>
	    <p class="restaurant_sub_title"><%= restaurant.description %></p>
	  </div>
	<% end %>

	<div class="links">
	  <%= link_to "New restaurant", new_restaurant_path %>
	</div> 
	Refresh localhost:3000 to see new styles. 
	
Put in some better fonts: 
	Go to google fonts to add light, normal and bold lato font to application.html.erb under the csrf_meta_tags like: 
	<link href='http://fonts.googleapis.com/css?family=Lato:300,400,700' rel='stylesheet' type='text/css'>
	Then go to fontawesome and to get started and grab the MaxCDN link there and put under the google one: 
	<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">

Change words "Mark comleted" to icons: 
	In the _dish.html.erb, in the first commplete class div, delete the "Mark complete" and turn the link_to into a checkmark:
	<%= link_to complete_restaurant_dish_path(@restaurant, dish.id), method: :patch do %>
		<i style= "opacity: 0.4;" class="fa fa-check"></i>
	<% end %>

	Do the same thing in the other complete div down below but without the opacity style like: 
	<%= link_to complete_restaurant_dish_path(@restaurant, dish.id), method: :patch do %>
		<i class="fa fa-check"></i>
	<% end %>

	Change out the trash style for a fa fa icon in the trash div: 
	<%= link_to restaurant_dish_path(@restaurant, dish.id), method: :delete, data: { confirm: "Are you sure?" } do %>
		<i class="fa fa-trash"></i>
	<% end %>
	Do the same below with the other trash div. 

Update the show page title and description: 
	At the top, below the notice id, replace the h2 and p tag title and sub titles with: 
	<h2 class="restaurant_title"><%= @restaurant.title %></h2>
	<p class="restaurant_sub_title"><%= @restaurant.description %></p>

	Wrap the edit and back buttons at the bottom inside the links class div so: 
	<div class="links">
		<%= link_to 'Edit', edit_restaurant_path(@restaurant) %> |
		<%= link_to 'Back', restaurants_path %>
	</div>
	Refresh. 

Add delete button in between the edit and back: 
	With: 
	<%= link_to 'Delete', restaurant_path(@restaurant), method: :delete, data: {confirm: "Are you sure?"} %>

Change where the user is redirected to after deleting a list: 
	In restaurants_controller.rb, in the destroy method, change the redirec_to from restaurants_url to: 
	Refresh.

Update the forms' css and icons: 
	In the new.html.erb: 
	Add class="restaurant_title" to the h2.
	Put the render form in a div with class forms like: 
	<div class="forms">
		<%= render 'form' %>
	</div>
	Put the link_to in a div with class links like: 
	<div class="links">
		<%= link_to 'Back', restaurants_path %>
	</div>

--End--








