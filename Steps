
= = = = = = LOG TIME  ! ! !  ! !

GENERAL INFO: 
	Step by step instructions on how to build fit_right app in ruby on rails.
	These steps are copied over from fit_right, a working app on the work viao. 
	- This is on my IC laptop

TO DOs:
- Put devise in. 
- Add in here how add things to devise. 
- pretty forms? 
- Create a master T0-DOs START LIST and add commits, testing, branching etc onto it. 
- Go back and make any scaffolds a manual process
- Add in devise extras like first and last name.  
- Do the styling manually. 

STEPS: 
Create a new rails app:
	skipping test unit and using Postgress DB in the installation:
	rails new fit_right --skip-test-unit -d postgresql
	should see rails create a bunch of files & directories for you and then bundle install for you too.  
	rake db:create and rake db:migrate
	check localhost:3000 in browser to make sure you see rails welcome 

Start repo:
	Initialize a repository on your machine:  
	git init
	git add .
	git commit -m "first commit"
	
	Create a remote repo on github and sync them:
	Go create the repo on github
	git remote add origin https://github.com/kennytrionfo/fit_right.git
	git push -u origin master

Start documentation: 
	Open app in text editor, 
	Edit readme file if u like, 
	Start step by step instructions file if you like. 

System check: 
	Check ur Rubies, versions and gems etc. i.e. rvm, ruby, rails, bundle, gems etc. 
	rvm list
	rvm gemset
	ruby -v
	rails -v

Install gems: 
	In Gemfile:
	group :development do
	  gem "better_errors"
	end
	gem "binding_of_caller" #This goes with better_errors gem and give you REPL.
	factory girl, sprockets? , Devise?
	Minitest: 
	group :test, :development do
  	gem "minitest-rails"
	end
	Check for the minitest generator in console with: 
	rails generate
	Install the gem with this from the console:
	rails g minitest:install
	Should see a test folder now in ur app in text editor. 

PUT TESTING IN HERE ALONG THE WAY!

ALSO COME BACK AND ADD IN HERE INSTRUCTIONS FOR MAKING IT MOBILE READY 

Manually create a Restaurant model with controllers, views and test files: 
	(for quick scaffolding skip this step and go to next step)
	In console: 
	rails g model Restaurant title:string description:text 	

	Move the model over to the db: 
		In console: 
		rake db:migrate

	Create a Restaurants controller: 
		In console: 
		rails g controller Restaurants 

	Create an index action 
		In restaurants_controller.rb:
		def index
		end

	Put all the resources in the routes file as well as make the root path point to the index action in restaurants controller: 
		-in routes.rb 
		resources :restaurants
		root 'restaurants#index'
 
	Create a new file for the index view: 
		In app/views/restaurant create new file called:
		index.html.erb

	Create the new and create CRUD actions in restaurants_controller.rb 
		Start wtih this: 
		def new
			@restaurant = Restaurant.new
		end

		def create
			@restaurant = Restaurant.new(restaurant_params)
		end


		private

		def restaurant_params
			params.require(:restaurant).permit(:title, :description)
		end

	Create a view for creating a new restaurant: 
		In app/views/restaurant: 
		new.html.erb

	Add code in new view for a form to creat a new restaurant: 
		In the new.html.erb file: 
		<h1>New Form</h1>
		<%= render 'form' %>
		<%= link_to "Back", root_path %>

	Create a form partial and use simple form gem to do it: 
		In view/restaurant create the form partial _form.html.erb
		Read documentation on simple_form
		put gem in Gemfile: 
		gem 'simple_form', '~> 3.0.2'
		bundle
		rails g simple_form:install --bootstrap  
		In the form partial: 
		<%= simple_form_for @restaurant, html: {multipart: true} do |f| %>
		  <% if @restaurant.errors.any?  %>
		    <div id="errors"></div>
		    <h2></h2>
		    <%= pluralize(@restaurant.errors.count, "error") %>
		    prevented this restaurant from saving
		    <ul></ul>
		    <% @restaurant.errors.full_messages.each do |msg| %>
		      <li>
		        <%= msg %>
		      </li>
		    <% end %>
		  <% end %>
		  <div class="form-group">
		    <%= f.input :image, input_html: { class: 'form-control'} %>
		  </div>
		  <div class="form-group">
		    <%= f.input :title, input_html: { class: 'form-control'} %>
		  </div>
		  <div class="form-group">
		    <%= f.input :description, input_html: { class: 'form-control'} %>
		  </div>
		  <%= f.button :submit, class: "btn btn-primary" %>
		<% end %>

	Add a flash message for when a new restaurant is created: 
		In view/layouts, 
		In the <body> tag and above the <%=yield: 
		<% flash.each do |name, msg| %>
	      <%= content_tag :div, msg, class: "alert alert-info"  %> <!-- this is bootstrap -->
	    <% end %>
	    Refresh and get unknow action error. url should have /restaurant/1 but we haven't defined a show action inside of our params. 
		So in restaurantsController:  
		def show
		end

		Because we'll have to do this for a few of our cruds, create a private method called find_restaurant for a few of the crud actions in restaurants_controller, under private, so:
		private 
		def find_restaurant
			@restaurant = restaurant.find(params[:id])
		end
		Then at top add following before action: 
		before_action :find_restaurant, only: [:show, :edit, :update, :destroy]

	Create a view for the show action with a new view file in views/restaurant: 
		show.html.erb
		Add following to file: 
		%h1= @restaurant.title
		%p= @restaurant.description
		Refresh, should see flash message "successfully created new restaurantt" as well as title and description. 

	Now also in this view, add a link back to the home page (root path): 
		<%= link_to "Back", root_path %>
		Refresh to see.

	List out all of the restaurants on the index page: 
		<% @restaurants.each do |restaurant| %>
	      <h2>
	        <%= link_to restaurant.title, restaurant %>
	      </h2>
	  	<% end %>
	  	Refresh and see NoMethodError in restaurants#index cuz it's not defined in the controller. 

	Add update and destroy actions/methods to restaurant controller: 
				def update
					if @restaurant.update(restaurant_params)
						redirect_to @restaurant, notice: "restaurant was Successfully updated"
					else
						render 'edit'
					end
				end

				def destroy

				end

	Create a new file for the edit page and code for an edit form: 
		Create new file in views/restaurants called:
		edit.html.erb 
		Add code: 
		<h1>Edit restaurant</h1>
		<%= render 'form' %>
		<%= link_to "Cancel", restaurant %>
	 
	Add a link_to form on the show page like this: 
		<%= link_to "Edit", edit_restaurant_path %>
		<% add code in the destroy action to delete a restaurant & redirect to main index page:  %>
		  @restaurant.destroy
		  redirect_to root_path
		<% end %>

	Now add delete button on show page: 
		In views/show:
		<%= link_to "Delete", restaurant_path, method: :delete, data: {confirm: "Are you sure?"} %>

	Add a "new" button on the index page:
		In views/index:
		<%= link_to "New restaurant", new_ %>

Use Scaffolding to create a Restaurant Model with contorllers, views and test files: 
	(first tiem through, I set up Restaurant Model AFTER setting up Devise but I think it's good to have at least one Model set up first. Try it and see.)
	rails g scaffold Restaurant name:string description:text address:text comments:text
	then
	rake db:migrate
	commit
	Test at localhost:3000/restaurants

Change root to point to the restaurants controller and the index action: 
	In routes.rb file: 
	root "restaurants#index"
	Check localhost:3000 in browser. Should show all the lists without need to go to /restaurants
	branch

Set up Devise
	To gemfile add: 
	gem 'devise'
	and bundle
	rails g devise:install
	Follow the instructions in either the console from using the generator above or on the Devise homepage and 
	
	Defined default url options in environments files by putting
	config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }
	in the config/environments/development.rb

	Ensure you have defined root_url to *something* in your config/routes.rb so: 
	root to: "home#index"

	Ensure you have flash messages in app/views/layouts/application.html.erb with:
    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>

    Copy Devise views (for customization) to your app by running:
    rails g devise:views

    Add devise to User Model with: 
	rails g devise User
	rake db:migrate
	restart server
	test: http://localhost:3000/users/sign_up by creating a new account. 
	look at it in the db in rails c? just to make sure it's there? 

Customize Devise signup, update etc forms: 

Make sure that each restaurant will be assigned to a user. 
	Create associations in models restaurant.rb and user.rb 
	has_many & belongs_to
	
	Generate a migration so that the restaurant table has a user_id column: 
	rails g migration add_user_id_to_restaurants user_id:integer:index
	See it in migration file
	rake db:migrate
	See changes in schema.rb file

	(If you want)Connect our existing restaurant(s) to a user by going into rails c and doing something like:
	@restaurant = Restaurant.first
	@user = User.first 
	@restaurant.user = @user
	@restaurant.save

Update the code in the restaurants_controller to attach a restaurant with a current user: 
	In restaurants_controller, change the @restaurant.new in both the new and the create actions to: 
	current_user.restaurants.build



Generate a model for our dishes with a name, description and vote rows/attributes and that references the restaurant: 
	With: 
	rails g model Dish name:string description:string vote:string restaurant:references 
	rake db:migrate

Do your associations for your models: 
	Tell the restaurant model that it has many dishs: 
	In the restaurant.rb file: 
	has_many :dishes

	Tell the dish model that it belongs to restaurants with: 
	belongs_to :restaurant
	merge branch

================================================
========== RIGHT HERE === RIGHT NOW ============
================================================
- see if I have to update anything to make the vote attribute a drop down field. 
- When check the db in rails c, the 2nd restaurant isn't connected to the user. user_id is nil. check this out. may be fixed in coming steps. 
- Also bring up pin_board app and look at it's steps alongside this one to conjoin them. 


Create some nested routes for our dishs: 
	In routes.rb file, make restaurants resources a block with dishs resources inside:  
	resources :restaurants do 
		resources :dishs
	end
 	
Look at the routes this created: 
	With: 
	rake routes

Generate a controller for your dish: 
	In the console with: 
	rails g controller dishs

Give yourself the ability to create new restaurants with new dishs: 
	In dishs_controller.rb, create a create method that creates a new restaurant variable/instance by setting it to a new TodoList that you find by the restaurant_id key. 
	Then create a method that creates a new dish by .. 
	with two private methods, one to set the restaurant and one to create dish params like: 
	
	before_action :set_restaurant

	def create
		@dish = @restaurant.dish.create(dish_params)
		redirect_to @restaurant 
	end


	private

	def set_restaurant 
		@restaurant = TodoList.find(params[:restaurant_id])
	end

	def dish_params
		params[:dish].permit(:content)
	end
branch? 
Now create the form to actually create a new restaurant: 
	Create two partials (new files) in views/dishs:
	1 _form.html.erb 
	<%= form_for([@restaurant, @restaurant.dishs.build]) do |f| %>
	<%= f.text_field :content, placeholder: "New Todo" %>
	<%= f.submit %>
	<%= end %>

	2 _dish.html.erb
	<p> <%= dish.content %></p>

Show the todo form and the restaurant items under the restaurant show page:
	Create a div that renders the restaurant from the _dishs.html.erb file. Under the description: 
	<div id="dishs_wrapper">
		<%= render @restaurant.dishs %>
	</div>
	Add another div inside of that div that renders the dish's form: 
	<div id="form">
		<%= render "dishs/form" %>
	</div>
	Test the show page that it shows and that you can make new dishs in a list. 

Add a delete button for the items: 
	Back in _dish.html.erb: 
	<%= link_to "Delete", restaurant 
	git commit -m ""_dish_path(@restaurant, dish.id), method: :delete, data: {confirm: "Are you sure?"} %>

Make it so that the app can take a delete request for an item and route it to the right method: 
	In dishs controller:
	def destroy
		@dish = @restaurant.dishs.find(params[:id])
		if @dish.destroy
			flash[:success] = "restaurant item was deleted"
		else
			flash[:error] = "restaurant item could not be deleted dude."	
		end
		redirect_to @restaurant	
	end
	Check it in browser. 
branch? 
Create the ability to mark an item as complete: 
	Add a migration to add a completed at datetime to the dishs table: 
	In console: 
	rails g migration add_completed_at_to_dishs completed_at:datetime
	rake db:migrate

	Add a route to give users the ability to mark an item as complete: 
	In config/routes.rb: 
	Make the dishs resources a block and add patch :complete. Should look like:
	resources :dishs do
      member do
        patch :complete
      end
    end
    rake routes to see it at the top. 

    In views/dishs/_dish.html.erb add:
    <%= link_to "Mark as Complete", complete_restaurant_dish_path(@restaurant, dish.id), method: :patch %>
    Test in browswer. 

    Now add the complete action in the dishs controller: 
    Create a private method: 
    def set_dish
		@dish = @restaurant.dishs.find(params[:id])		
	end
	We can also now remove this line from the destroy action above now that it's a private method. 
	Now create a before action: 
	before_action :set_dish, except: [:create]

	Create a create action: 
	def complete
		@dish.update_attribute(:completed_at, Time.now)
		redirect_to @restaurant, notice: "dish completed dude"
	end
	Test in browswer. Just a flash message will show is all at this point. It is marked as complete but nothing changes. 

	Next clean up and add to _dish.html.erb: 
	Replace what's there with: 
	<div class="row clearfix">
		<% if dish.completed? %>
			<div class="complete">
				<%= link_to "Mark as Complete", complete_restaurant_dish_path(@restaurant, dish.id), method: :patch %>
			</div>
			<div class="dish">
				<p style="opacity: 0.4;"><strike><%= dish.content %></strike></p>
			</div>
			<div class="trash">
				<%= link_to "Delete", restaurant_dish_path(@restaurant, dish.id), method: :delete, data: { confirm: "Are you sure?" } %>
			</div>
		<% else %>
			<div class="complete">
				<%= link_to "Mark as Complete", complete_restaurant_dish_path(@restaurant, dish.id), method: :patch %>
			</div>
			<div class="dish">
				<p><%= dish.content %></p>
			</div>
			<div class="trash">
				<%= link_to "Delete", restaurant_dish_path(@restaurant, dish.id), method: :delete, data: { confirm: "Are you sure?" } %>
			</div>
		<% end %>
	</div>

	We can't use the dish.completed?, we have to define what it is so in TodoItem Model: 
	def completed? # If it's completed, the completed_at field should not be blank. 
		!completed_at.blank?  	
  	end
  	Test in browser.

Begin styling.

Clean up css files and names:
	Add .scss to application.css file in app/assets/stylesheets.
	Delete the scaffolds, dishs and restaurants css.scss files.
	
Create own css styling or paste in this for convenience: 
	$white_opaque: rgba(250, 250, 250, .3);
	$dark: #1F7972;

	* {
		box-sizing: border-box;
	}

	html {
	  height: 100%;
	}

	body {
	 	height: 100%;
	  background: -webkit-linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  background:    -moz-linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  background:     -ms-linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  background:      -o-linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  background:         linear-gradient(40deg, #4CB8C4 10%, #EAECC6 100%);
	  font-family: 'Lato', sans-serif;
	}

	.clearfix:before,
	.clearfix:after {
	    content: " ";
	    display: table;
	}

	.clearfix:after {
	    clear: both;
	}

	#notice {
		text-align: center;
		font-size: 0.6em;
		color: $dark;
		font-weight: 100;
	}

	.container {
		width: 50%;
		max-width: 750px;
		background: $white_opaque;
		margin: 3em auto 0 auto;
		border-radius: 7px;
		-webkit-box-shadow: 0 0 4px 3px rgba(0,0,0,.3);
		box-shadow: 0 0 4px 4px rgba(0,0,0,.03);
		padding: 1em 0;
	}

	.restaurant_title {
		text-align: center;
		font-weight: 700;
		font-size: 2.5rem;
		text-transform: uppercase;
		color: white;
		margin: 0;
		a {
			text-decoration: none;
			color: white;
			transition: all .4s ease-in-out;
			&:hover {
				opacity: 0.4;
			}
		}
	}

	.restaurant_sub_title {
		margin: 0 0 3em 0;
		text-align: center;
		font-size: 0.9em;
		color: $dark;
		font-weight: 100;
	}

	.index_row {
		padding: 2em;
		border-bottom: 1px solid rgba(250,250,250, .3);
		.restaurant_sub_title {
			margin-bottom: 0;
		}
	}

	#dishs_wrapper {
		.row {
			width: 100%;
			border-top: 1px solid rgba(250,250,250, .3);
			border-bottom: 1px solid rgba(250,250,250, .3);
			.complete {
				width: 10%;
				float: left;
				text-align: center;
				border-right: 1px solid rgba(250,250,250, .3);
				padding: 1em 0;
			}
			.dish {
				width: 80%;
				float: left;
				p {
					margin: 0;
					padding: 1em;
					color: $dark;
					font-weight: 100;
				}
			}
			.trash {
				width: 10%;
				float: left;
				text-align: center;
				border-left: 1px solid rgba(250,250,250, .3);
				padding: 1em 0;
			}
			i {
				color: white;
				transition: all .4s ease-in-out;
				&:hover {
					color: $dark;
				}
			}
		}
		#form {
			margin-top: 2em;
			padding: 0 5%;
			input[type="text"] {
				width: 72%;
				margin-right: 2%;
				display: inline-block;
				outline: none;
				background: rgba(250,250,250,.4);
				border: none;
				height: 40px;
				border-radius: 4px;
				padding: 1em 2em;
			}
			input[type="submit"] {
				background: rgba(250,250,250,.4);
				outline: none;
				border: none;
				height: 40px;
				border-radius: 4px;
				width: 25%;
				display: inline-block;
				transition: all .4s ease-in-out;
				cursor: pointer;
				&:hover {
					background: $dark;
				}
			}
			::-webkit-input-placeholder { color: $dark; }
		}
	}

	.links {
		display: block;
		margin: 1.5em auto 0 auto;
		text-align: center;
		font-size: 0.8em;
		color: white;
		a {
			color: white;
		}
	}

	.forms {
		padding: 0 5%;
	}
	label {
		color: $dark;
	}
	input[type="text"], textarea {
		width: 100%;
		margin: .5em 2% 1em 0;
		display: inline-block;
		outline: none;
		background: rgba(250,250,250,.4);
		border: none;
		height: 40px;
		border-radius: 4px;
		padding: 1em 2em;
	}
	textarea {
		height: 200px;
	}
	input[type="submit"] {
		background: white;
		outline: none;
		border: none;
		height: 40px;
		border-radius: 4px;
		width: 25%;
		display: inline-block;
		transition: all .4s ease-in-out;
		cursor: pointer;
		color: $dark;
		&:hover {
			background: $dark;
			color: white;
		}
	}
	::-webkit-input-placeholder { color: $dark; }

In views/applications/layout.html.erb, wrap the yield in a container class like this: 
	<div class="container">
		<%= yield %>
	</div>

Update the index page in restaurants/index.html.erb by deleting what's there and replace with this:
	<% @restaurants.each do |restaurant| %>
	  <div class="index_row clearfix">
	    <h2 class="restaurant_title"><%= link_to restaurant.title, restaurant %></h2>
	    <p class="restaurant_sub_title"><%= restaurant.description %></p>
	  </div>
	<% end %>

	<div class="links">
	  <%= link_to "New restaurant", new_restaurant_path %>
	</div> 
	Refresh localhost:3000 to see new styles. 
	
Put in some better fonts: 
	Go to google fonts to add light, normal and bold lato font to application.html.erb under the csrf_meta_tags like: 
	<link href='http://fonts.googleapis.com/css?family=Lato:300,400,700' rel='stylesheet' type='text/css'>
	Then go to fontawesome and to get started and grab the MaxCDN link there and put under the google one: 
	<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">

Change words "Mark comleted" to icons: 
	In the _dish.html.erb, in the first commplete class div, delete the "Mark complete" and turn the link_to into a checkmark:
	<%= link_to complete_restaurant_dish_path(@restaurant, dish.id), method: :patch do %>
		<i style= "opacity: 0.4;" class="fa fa-check"></i>
	<% end %>

	Do the same thing in the other complete div down below but without the opacity style like: 
	<%= link_to complete_restaurant_dish_path(@restaurant, dish.id), method: :patch do %>
		<i class="fa fa-check"></i>
	<% end %>

	Change out the trash style for a fa fa icon in the trash div: 
	<%= link_to restaurant_dish_path(@restaurant, dish.id), method: :delete, data: { confirm: "Are you sure?" } do %>
		<i class="fa fa-trash"></i>
	<% end %>
	Do the same below with the other trash div. 

Update the show page title and description: 
	At the top, below the notice id, replace the h2 and p tag title and sub titles with: 
	<h2 class="restaurant_title"><%= @restaurant.title %></h2>
	<p class="restaurant_sub_title"><%= @restaurant.description %></p>

	Wrap the edit and back buttons at the bottom inside the links class div so: 
	<div class="links">
		<%= link_to 'Edit', edit_restaurant_path(@restaurant) %> |
		<%= link_to 'Back', restaurants_path %>
	</div>
	Refresh. 

Add delete button in between the edit and back: 
	With: 
	<%= link_to 'Delete', restaurant_path(@restaurant), method: :delete, data: {confirm: "Are you sure?"} %>

Change where the user is redirected to after deleting a list: 
	In restaurants_controller.rb, in the destroy method, change the redirec_to from restaurants_url to: 
	Refresh.

Update the forms' css and icons: 
	In the new.html.erb: 
	Add class="restaurant_title" to the h2.
	Put the render form in a div with class forms like: 
	<div class="forms">
		<%= render 'form' %>
	</div>
	Put the link_to in a div with class links like: 
	<div class="links">
		<%= link_to 'Back', restaurants_path %>
	</div>

--End--








